-- Create the shift_activities table
CREATE TABLE public.shift_activities (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    guard_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    activity_type text NOT NULL, -- e.g., 'Shift Start', 'Shift End', 'Check Call', 'Shift Confirmation'
    "timestamp" timestamptz NOT NULL DEFAULT now(),
    shift_id uuid, -- Optional: if shifts have their own table/ID
    site_id uuid,
    notes text,
    created_at timestamptz DEFAULT now()
);

-- Add comments for shift_activities
COMMENT ON COLUMN public.shift_activities.guard_id IS 'Identifier of the guard performing the activity';
COMMENT ON COLUMN public.shift_activities.activity_type IS 'Type of activity (e.g., Shift Start, Shift End)';
COMMENT ON COLUMN public.shift_activities.shift_id IS 'Optional link to a specific shift record';
COMMENT ON COLUMN public.shift_activities.site_id IS 'Optional link to a specific site';

-- Indexes for shift_activities
CREATE INDEX idx_shift_activities_guard_id ON public.shift_activities(guard_id);
CREATE INDEX idx_shift_activities_timestamp ON public.shift_activities("timestamp" DESC);
CREATE INDEX idx_shift_activities_activity_type ON public.shift_activities(activity_type);
CREATE INDEX idx_shift_activities_site_id ON public.shift_activities(site_id);


-- Create the no_show_alerts table
CREATE TABLE public.no_show_alerts (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    guard_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    expected_shift_start_time timestamptz NOT NULL,
    alert_time timestamptz NOT NULL DEFAULT now(),
    shift_id uuid,
    site_id uuid,
    status text NOT NULL DEFAULT 'Pending', -- e.g., Pending, Acknowledged, Resolved
    acknowledged_by uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    acknowledged_at timestamptz,
    resolution_notes text,
    created_at timestamptz DEFAULT now()
);

-- Add comments for no_show_alerts
COMMENT ON COLUMN public.no_show_alerts.guard_id IS 'Identifier of the guard who is a no-show';
COMMENT ON COLUMN public.no_show_alerts.expected_shift_start_time IS 'When the guard was expected to start';
COMMENT ON COLUMN public.no_show_alerts.status IS 'Current status of the alert (Pending, Acknowledged, Resolved)';
COMMENT ON COLUMN public.no_show_alerts.acknowledged_by IS 'User who acknowledged the alert';

-- Indexes for no_show_alerts
CREATE INDEX idx_no_show_alerts_guard_id ON public.no_show_alerts(guard_id);
CREATE INDEX idx_no_show_alerts_expected_shift_start_time ON public.no_show_alerts(expected_shift_start_time DESC);
CREATE INDEX idx_no_show_alerts_status ON public.no_show_alerts(status);
CREATE INDEX idx_no_show_alerts_site_id ON public.no_show_alerts(site_id);

-- RLS Policies for shift_activities
ALTER TABLE public.shift_activities ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow authenticated users to insert their own shift activities"
ON public.shift_activities
FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = guard_id);

CREATE POLICY "Allow authenticated users to select all shift activities" -- Consider refining later
ON public.shift_activities
FOR SELECT
TO authenticated
USING (true); -- Or USING (auth.uid() = guard_id OR EXISTS (SELECT 1 FROM user_roles WHERE user_roles.user_id = auth.uid() AND user_roles.role = 'supervisor'))


-- RLS Policies for no_show_alerts
ALTER TABLE public.no_show_alerts ENABLE ROW LEVEL SECURITY;

-- INSERT: Typically, no-show alerts are generated by a trusted backend process (e.g., a cron job using service_role).
-- If client-side insertion is ever needed (less common for this), specific policies would be required.
-- For service_role, RLS is bypassed. If a specific 'bot' user is used for generation:
-- CREATE POLICY "Allow alert generation service to insert alerts"
-- ON public.no_show_alerts
-- FOR INSERT
-- TO authenticated -- Assuming the 'bot' user is an authenticated user
-- WITH CHECK (auth.uid() = 'ID_OF_THE_BOT_USER_HERE'); -- Replace with actual bot user ID.

-- SELECT: Allow authenticated users (e.g., supervisors) to select alerts.
CREATE POLICY "Allow authenticated users (e.g., supervisors) to select no-show alerts"
ON public.no_show_alerts
FOR SELECT
TO authenticated
USING (true); -- Refine with role checks: EXISTS (SELECT 1 FROM user_roles WHERE user_roles.user_id = auth.uid() AND user_roles.role IN ('supervisor', 'manager'))

-- UPDATE: Allow authenticated users (e.g., supervisors) to update alerts (acknowledge, resolve).
CREATE POLICY "Allow authenticated users (e.g., supervisors) to update no-show alerts"
ON public.no_show_alerts
FOR UPDATE
TO authenticated
USING (true) -- Refine with role checks
WITH CHECK (true); -- Add specific checks if needed, e.g., only certain fields can be updated by certain roles.


-- Grant permissions (Supabase typically handles this well based on RLS)
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.shift_activities TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.no_show_alerts TO authenticated;


SELECT 'Migration 0003_create_shift_and_noshow_tables.sql executed successfully';
