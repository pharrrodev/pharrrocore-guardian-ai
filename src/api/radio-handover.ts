
import { supabase } from '@/integrations/supabase/client'; // Import Supabase client
// Removed: import { appendCsvLine, RadioHandoverLogEntry } from '../utils/appendCsv';
// Removed: import { guards } from '../data/rota-data';

export interface RadioHandoverRequest {
  guard_id: string | null; // UUID of the guard if they are a system user
  guard_name_logged: string; // Name of the guard as known/selected
  action: 'radio' | 'handover';
  user_id_performed_log: string; // UUID of the user performing the log
  site_id?: string | null; // Optional site_id
}

export interface RadioHandoverResponse {
  status: 'ok' | 'error';
  timestamp?: string; // Will be generated by DB, but can be returned if needed
  message?: string;
  logId?: string; // ID of the created log entry
}

export const logRadioHandover = async (request: RadioHandoverRequest): Promise<RadioHandoverResponse> => {
  try {
    const logEntry = {
      guard_id: request.guard_id,
      guard_name_logged: request.guard_name_logged,
      action: request.action,
      user_id_performed_log: request.user_id_performed_log,
      site_id: request.site_id || null,
      // log_timestamp and created_at will be set by default in the DB
    };

    const { data, error } = await supabase
      .from('radio_handover_logs')
      .insert(logEntry)
      .select('id, log_timestamp') // Select generated id and timestamp
      .single(); // Expect a single row back

    if (error) {
      console.error('Error inserting radio/handover log to Supabase:', error);
      return {
        status: 'error',
        message: error.message || 'Failed to log entry to Supabase'
      };
    }

    if (!data) {
      console.error('No data returned after insert operation');
      return {
        status: 'error',
        message: 'Failed to log entry, no data returned from database.'
      };
    }

    return {
      status: 'ok',
      timestamp: data.log_timestamp,
      logId: data.id,
      message: 'Log entry saved successfully.'
    };

  } catch (error) {
    console.error('Unexpected error logging radio/handover:', error);
    const errorMessage = error instanceof Error ? error.message : "An unexpected error occurred";
    return {
      status: 'error',
      message: errorMessage
    };
  }
};
