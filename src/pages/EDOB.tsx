
import { useState } from "react"; // Removed useEffect as entries state is removed
import { Link } from "react-router-dom";
import { Home, FileText } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { FormValues } from "@/data/edob-types"; // EDOBEntry might be removed if not used locally
import EDOBForm from "@/components/edob/EDOBForm";
import EDOBLog from "@/components/edob/EDOBLog";
import { supabase } from "@/lib/supabaseClient"; // Import Supabase client
import { toast } from "sonner"; // For notifications

const EDOB = () => {
  // The 'entries' state is removed as EDOBLog will fetch its own data.
  // 'loading' state might also be managed within EDOBLog or not needed here.
  // We need a way to trigger a refresh in EDOBLog after a new entry is submitted.
  // For simplicity, we can pass a 'refreshKey' to EDOBLog that changes.
  const [refreshKey, setRefreshKey] = useState(0);

  async function onSubmit(values: FormValues) {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      let userId = null;
      if (user) {
        userId = user.id;
      } else {
        // Handle case where user is not logged in, if strict policy or for audit
        // For now, we'll allow anonymous if RLS policy permits, or insert null for user_id
        console.warn("User not logged in, submitting EDOB entry without user_id.");
      }

      // Construct the new entry for Supabase, matching edob_entries schema
      const newEntryForSupabase = {
        // id is generated by Supabase by default
        timestamp: new Date().toISOString(), // Use current time, or form value if available
        type: values.entryType,
        details: (values.entryType === 'Patrol' && (!values.details || values.details.trim() === ''))
                   ? "A.I.O." // All In Order default for Patrol
                   : (values.details || ""),
        route: values.entryType === 'Patrol' ? values.patrolRoute : null,
        // user_id will be set based on logged-in user
        user_id: userId,
        // site_id can be null or a default value if not implemented yet
        site_id: null,
        // Additional fields from FormValues if they map directly to schema
        // Example: if your schema has person_name, company, alarm_zone, alarm_type
        // These specific fields (accessType, personName, etc.) are not directly in the
        // base edob_entries schema provided. They would typically be part of the 'details'
        // in a JSON object, or the schema would need to be extended.
        // For now, we'll keep details as a text field.
        // If these are crucial, they should be part of the 'details' field, possibly structured.
      };

      // If fields like personName, company etc. are to be stored,
      // they should ideally be part of the 'details' JSON or separate columns.
      // For this iteration, we ensure 'details' captures all necessary info.
      let entryDetails = newEntryForSupabase.details;
      if (values.entryType === 'Access Control') {
        entryDetails = `Type: ${values.accessType}, Name: ${values.personName}, Company: ${values.company}. Details: ${values.details}`;
      } else if (values.entryType === 'Alarm Activation') {
        entryDetails = `Zone: ${values.alarmZone}, Type: ${values.alarmType}. Details: ${values.details}`;
      }
      newEntryForSupabase.details = entryDetails;


      const { error } = await supabase
        .from("edob_entries")
        .insert([newEntryForSupabase]);

      if (error) {
        console.error("Error inserting EDOB entry:", error);
        toast.error(`Failed to submit entry: ${error.message}`);
        throw error;
      }

      toast.success("EDOB entry submitted successfully!");
      // Trigger a refresh in EDOBLog by changing the key
      setRefreshKey(prevKey => prevKey + 1);

    } catch (error) {
      // Error already logged by Supabase client or caught above
      // Additional error handling if needed
    }
  }

  return (
    <div className="min-h-screen bg-background flex items-center justify-center p-4">
      <Card className="w-full max-w-6xl h-[85vh] flex flex-col">
        <CardHeader className="flex flex-row items-center gap-4">
          <FileText className="w-10 h-10 text-primary" />
          <div>
            <CardTitle className="text-2xl">Electronic Daily Occurrence Book (EDOB)</CardTitle>
            <CardDescription>Log all site activities, patrols, and observations.</CardDescription>
          </div>
          <div className="ml-auto flex gap-2">
            <Button asChild variant="ghost" size="icon">
              <Link to="/" aria-label="Go to dashboard">
                <Home className="h-5 w-5" />
              </Link>
            </Button>
          </div>
        </CardHeader>
        <CardContent className="flex-1 overflow-hidden">
          <div className="grid md:grid-cols-2 gap-6 h-full">
            <EDOBForm onSubmit={onSubmit} />
            {/* Pass refreshKey to EDOBLog to trigger re-fetch when an entry is added */}
            <EDOBLog key={refreshKey} />
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default EDOB;
