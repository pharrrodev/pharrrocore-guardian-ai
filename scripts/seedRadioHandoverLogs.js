// This script is designed to be run in a Node.js environment.
// Ensure you have `dotenv`, `@supabase/supabase-js`, and `dayjs` installed:
// npm install dotenv @supabase/supabase-js dayjs
// or
// yarn add dotenv @supabase/supabase-js dayjs
//
// Create a .env file in the project root with your Supabase URL and Service Role Key:
// SUPABASE_URL=your_supabase_url
// SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key
//
// Run the script from the project root using: node scripts/seedRadioHandoverLogs.js

require('dotenv').config({ path: require('path').resolve(process.cwd(), '.env') });
const { createClient } = require('@supabase/supabase-js');
const dayjs = require('dayjs');
const crypto = require('crypto'); // For UUID if DB didn't auto-generate, but it does.

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error("Error: SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY must be set in .env file.");
  process.exit(1);
}

const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

console.log("Supabase admin client initialized.");

// --- Data Definitions ---
const ACTIONS = ['radio', 'handover'];
const DUMMY_SITE_ID = '00000000-0000-0000-0000-000000000001'; // Example Site ID
const NUMBER_OF_LOGS_TO_GENERATE = 75; // Target 50-100
const DATE_RANGE_DAYS = 7; // Generate logs for today +/- DATE_RANGE_DAYS

function getRandomElement(arr) {
  if (!arr || arr.length === 0) return null;
  return arr[Math.floor(Math.random() * arr.length)];
}

async function fetchUsers() {
  console.log("Fetching users (guards/supervisors) from 'profiles' table...");
  // Fetch users who can be subjects of logs or performers of logs
  const { data: users, error } = await supabaseAdmin
    .from('profiles')
    .select('id, guard_name') // 'id' here is auth.users.id, 'guard_name' is the display name
    .in('role', ['guard', 'supervisor', 'admin']);

  if (error) {
    console.error("Error fetching users:", error.message);
    throw error;
  }
  if (!users || users.length === 0) {
    throw new Error("No users found with roles 'guard', 'supervisor', or 'admin' in profiles table. Please run seedUsers.js first.");
  }
  console.log(`Found ${users.length} users.`);
  return users.map(u => ({ id: u.id, name: u.guard_name }));
}

async function seedRadioHandoverLogs() {
  console.log("Starting Radio Handover Logs seeding process...");
  let systemUsers; // Array of {id, name}
  try {
    systemUsers = await fetchUsers();
  } catch (error) {
    console.error("Could not proceed without system users. Exiting.");
    return;
  }

  const generatedLogs = [];
  const today = dayjs();

  for (let i = 0; i < NUMBER_OF_LOGS_TO_GENERATE; i++) {
    const randomGuardSubject = getRandomElement(systemUsers);
    const randomLoggerUser = getRandomElement(systemUsers);
    if (!randomGuardSubject || !randomLoggerUser) {
        console.warn("Skipping log generation due to missing guard subject or logger user.");
        continue;
    }

    const dateOffset = Math.floor(Math.random() * (DATE_RANGE_DAYS * 2 + 1)) - DATE_RANGE_DAYS;
    // Simulate logs around typical shift start/end times: 7 AM, 3 PM, 11 PM
    const baseHour = getRandomElement([7, 15, 23]);
    const logTimestamp = today.add(dateOffset, 'day')
                               .hour(baseHour + Math.floor(Math.random() * 3) - 1) // +/- 1 hour around base
                               .minute(Math.floor(Math.random() * 60))
                               .second(Math.floor(Math.random() * 60))
                               .toISOString();

    const action = getRandomElement(ACTIONS);

    const logEntry = {
      // id is auto-generated by DB
      guard_id: randomGuardSubject.id, // The guard this log is about
      guard_name_logged: randomGuardSubject.name, // Their name at the time of logging
      action: action,
      log_timestamp: logTimestamp,
      user_id_performed_log: randomLoggerUser.id, // The user who clicked the button
      site_id: DUMMY_SITE_ID,
    };
    generatedLogs.push(logEntry);
  }

  if (generatedLogs.length === 0) {
    console.log("No radio/handover logs were generated. Exiting.");
    return;
  }

  console.log(`Generated ${generatedLogs.length} radio/handover log records locally.`);

  // Insert the new batch
  console.log(`Inserting ${generatedLogs.length} new radio/handover log records into Supabase...`);
  try {
    const { data, error: insertError } = await supabaseAdmin
      .from('radio_handover_logs')
      .insert(generatedLogs)
      .select();

    if (insertError) {
      console.error('Error inserting new radio/handover logs:', insertError.message);
      throw insertError;
    }

    console.log(`Successfully inserted ${data ? data.length : 0} new radio/handover log records.`);
    if (data && data.length < generatedLogs.length) {
        console.warn(`Some logs may not have been inserted. Prepared: ${generatedLogs.length}, Inserted: ${data.length}`);
    }

  } catch (error) {
    console.error('Failed to seed radio/handover logs:', error);
  } finally {
    console.log("Radio/handover logs seeding process complete.");
  }
}

seedRadioHandoverLogs().catch(error => {
  console.error("Unhandled error in seedRadioHandoverLogs:", error);
});
